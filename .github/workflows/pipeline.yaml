name: Continuous Training Pipeline
on:
  pull_request:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo onto runner
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          curl -sSL https://install.python-poetry.org | python3 -
          poetry install

      - name: Install DVC
        run: |
          poetry run pip install dvc dvc-gdrive

      - name: Configure DVC
        run: |
          mkdir -p .dvc/tmp
          echo '${{ secrets.GDRIVE_CREDENTIALS }}' > .dvc/tmp/gdrive-user-credentials.json
          poetry run dvc remote modify gdrive gdrive_user_credentials_file .dvc/tmp/gdrive-user-credentials.json
          poetry run dvc pull --with-deps -r gdrive

      - name: Run DVC repro
        run: |
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/main" ]; then
            poetry run dvc repro
          fi

      - name: Run tests
        run: |
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/main" ]; then
            poetry run pytest tests/ --ignore=benchmark --full
          else
            poetry run pytest tests/ --ignore=benchmark
          fi

      - name: Run benchmark
        run: |
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/main" ]; then
            poetry run pytest tests/benchmark/bench.py --benchmark-json output.json --full
          else
            poetry run pytest tests/benchmark/bench.py --benchmark-json output.json
          fi

      - name: Download previous benchmark data
        uses: actions/cache@v4
        with:
          path: ./cache
          key: ${{ runner.os }}-benchmark

      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'pytest'
          output-file-path: output.json
          external-data-json-path: ./cache/benchmark-data.json
          fail-on-alert: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          comment-on-alert: true
          summary-always: true

      - name: Upload new benchmark data
        uses: actions/cache@v1
        with:
          path: ./cache
          key: ${{ runner.os }}-benchmark

      - name: Run pylint with dslinter
        run: poetry run pylint src

      - name: Publish new model
        run: |
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/main" ]; then
            poetry run dvc push -r gdrive
          fi
